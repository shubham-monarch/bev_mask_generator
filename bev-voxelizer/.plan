+ priority based collapsing
+ resolution based collapsing
+ refactoring generate_bev_voxels()

+ handling negative values
+ shift logger to init.py
+ fix plot_bev_scatter() color issue


+ priority based collapsing
+ crop pointcloud to bounding boxs
- hidden point removal 
+ farthest point sampling
* checkout bev-former voxelizer
+ statistical outlier removal
+ refactor compute_tilt_matrix()
+ make project_to_ground_plane more robust

- remove main.py
+ major refactoring 
+ remove utils folder

* make [pcd-segmented to bev-segmented pipeline] fast
    * use GPU parallelization
    * use CPU parallelization

- get decent baseline results
- time the dataset generation step

- fix BEV GT data

- BEV GT should be centered
- BEV GT should not have black regions
- BEV GT should have fixed resolution across files
- input image rectification


- fix camera extrinsics 

- need to shift z as well
- fix [align normal with +y-axis if angle with y-axis is negative] in [project_to_ground_plane]
- normalize plane normal --> [a,b,c,d]
- BEV projection was shifted along y. 
- [debug] project pointcloud to camera to check camera extrinsics
- transpose effect

- fix compute_tilt_matrix --> align with x and z-axis as well  
- need to align two axes instead of one
- [debug] align x and z, and y should automatically align

- generate camera extrinsics as part of dataset
- why is normal not completely aligning with the y-axis? 

- add test.py
- change co-ordinate frame to align with the sbevnet axes
- update generate-train-data.py
- sbvenet with only [canopy + navigable-space] as output


x --> [-3, 3] --> 6m
z --> [0, 15] --> 15m

seg-map --> 500 * 500 